---
description: 
globs: 
alwaysApply: true
---
---
id: visual-novel-dialogue-todo
title: Visual Novel Dialogue ‚Äì Roadmap
version: 0.1.3
category: roadmap
status: active
---

# üìå PHASE 1: Planning & Documentation

## ‚úÖ Core Design Decisions
- [x] Define JSON structure (`settings` and `script`)
- [x] Choose supported commands (`jump`, `end`, `Choice`, `show`, `hide`)
- [x] Lock in runtime API surface (`start`, `jumpTo`, `pause`, `resume`)
- [x] Define config system (`fontFamily`, `boxStyle`, `typeSpeed`, `autoForward`, `styles`, `audio`, `boxAnimationSpeed`)
- [x] Set plugin boundaries (no conditionals, no rollback, no i18n, no multiple dialogue boxes)

## ‚úÖ Docs: Plugin Design
- [x] `overview.mdc` ‚Äî plugin summary and architecture
- [x] `json-format.mdc` ‚Äî JSON structure, commands, formatting, audio
- [x] `usage.mdc` ‚Äî setup, API, full integration, multi-file support, visual hooks
- [x] Advanced example includes `{style=}`, `{audio=}`, `show`, `hide`, and `Choice`
- [x] Credits and license included
- [x] This roadmap file (`todo.mdc`)
- [x] `status.mdc` ‚Äî version logs, changelog
- [x] `README.md` ‚Äî summary, install instructions, and link to docs

## ‚úÖ Finally
- [x] update `.cursor/rules/status.mdc` with phase 1 work


---

# üöß PHASE 2: Core Plugin Development

## ‚úÖ Project Setup
- [x] Scaffold plugin in `src/VisualNovelDialogue.ts`
- [x] Configure TypeScript (`tsconfig.json`)
- [x] Set up build system (`tsc`, `rollup`, or `vite`)
- [x] Create core class with `load()`, `start()`, `jumpTo()`, etc.

## üß† Dialogue System
- [x] Display dialogue box in fixed position with optional animation (`boxAnimationSpeed`)
- [x] Parse `script[]` and dispatch commands (`"x Hello!"`, `jump`, `end`, `Choice`, `show`, `hide`)
- [ ] Support `{style=value}` and `{audio=value}{/audio}` inline formatting
- [ ] Handle typewriter effect with `typeSpeed` config
- [x] Support auto-forward toggle
- [ ] Render vertical choices (button list) with configurable styling
- [x] Handle label-based branching with `jump`
- [x] Manage overflow (line wrapping or clamping)
- [x] Apply config (`fontFamily`, `boxStyle`, `styles`, `audio`)
- [x] Emit internal events:
  - [x] `onLineEnd(line)`
  - [x] `onChoice(label, text)`
  - [x] `onEnd()`
  - [x] `onShow(characterId, emotion)`
  - [x] `onHide(characterId)`
- [x] Support `boxPosition` config option with values `'bottom'`, `'top'`, `'center'`

## Finally
- [ ] update `.cursor/rules/status.mdc` with phase 2 work


---

# üß™ PHASE 3: Testing & Developer Experience

## üîß Plugin Usability
- [ ] Warn on unknown labels, invalid commands, or malformed config
- [ ] Gracefully ignore unrecognized lines (fallback to dialogue)
- [ ] Log state when `debug = true`
- [ ] Confirm `.load()` works multiple times without issues
- [ ] Test audio playback trigger during typing

## üî¨ Local Testing
- [ ] Create basic Phaser test scene
- [ ] Test full playback of single and multi-file dialogue
- [ ] Confirm correct timing, typewriter effect, and inline formatting behavior
- [ ] Verify style map behavior (e.g., bold, italic, size)

## Finally
- [ ] update `.cursor/rules/status.mdc` with phase 3 work


---

# üíª PHASE 4: Demo Project

## üïπÔ∏è Phaser Integration
- [ ] Create full demo project
- [ ] Include multiple dialogue files (`tutorial.json`, `princess-path.json`, etc.)
- [ ] Use plugin in real `MainScene`
- [ ] Connect all runtime API methods in usable context
- [ ] Render `show` / `hide` via `onShow` / `onHide` to control sprites
- [ ] Demonstrate switching emotions (e.g., `blush`, `angry`)
- [ ] Support scene transition on dialogue end
- [ ] Include layout variants (e.g., top-positioned box)
- [ ] Add background image, placeholder character sprite assets

## üåç Distribution
- [ ] Deploy live demo (GitHub Pages, Netlify, etc.)
- [ ] Link demo and docs from `README.md`

## Finally
- [ ] update `.cursor/rules/status.mdc` with phase 4 work


---

# üì¶ PHASE 5: NPM Packaging & Release

## üß∞ NPM Metadata
- [ ] Create `package.json` with:
  - name, version, description
  - license, keywords
  - `"type": "module"`
  - `main`, `types`, `"exports"` fields
  - `"files"` array to include only `dist/`, `README.md`
  - `repository`, `author`, `bugs`, `homepage`

## üì¶ Build & Types
- [ ] Build output (`tsc` or bundler)
- [ ] Emit `.d.ts` type declarations
- [ ] Test via `npm link` or local install
- [ ] Confirm tree-shaking and import friendliness

## üöÄ Publish
- [ ] Run `npm login`
- [ ] Publish: `npm publish --access public`
- [ ] Tag version: `npm version patch | minor | major`
- [ ] Push release notes and tag to GitHub
- [ ] Expand README.md to include better instructions based on the project's current state.

---

# ‚úÖ PHASE 6: Post-Release Maintenance

- [ ] Link to NPM and demo in `README.md`
- [ ] Monitor for bugs and developer feedback
- [ ] Keep `status.mdc` up to date for future versions
- [ ] Revisit roadmap if extending beyond MVP
